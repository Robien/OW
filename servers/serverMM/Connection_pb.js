/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Connection.ACKMM', null, global);
goog.exportSymbol('proto.Connection.ConnectionMessageClient', null, global);
goog.exportSymbol('proto.Connection.ConnectionMessageClient.ConnectionMessageTypeClient', null, global);
goog.exportSymbol('proto.Connection.ConnectionMessageServer', null, global);
goog.exportSymbol('proto.Connection.ConnectionMessageServer.ConnectionMessageTypeServer', null, global);
goog.exportSymbol('proto.Connection.StartGame', null, global);
goog.exportSymbol('proto.Connection.StartMatchMaking', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Connection.ConnectionMessageClient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Connection.ConnectionMessageClient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Connection.ConnectionMessageClient.displayName = 'proto.Connection.ConnectionMessageClient';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Connection.ConnectionMessageClient.prototype.toObject = function(opt_includeInstance) {
  return proto.Connection.ConnectionMessageClient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Connection.ConnectionMessageClient} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Connection.ConnectionMessageClient.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: msg.getType(),
    startmatchmaking: (f = msg.getStartmatchmaking()) && proto.Connection.StartMatchMaking.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Connection.ConnectionMessageClient}
 */
proto.Connection.ConnectionMessageClient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Connection.ConnectionMessageClient;
  return proto.Connection.ConnectionMessageClient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Connection.ConnectionMessageClient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Connection.ConnectionMessageClient}
 */
proto.Connection.ConnectionMessageClient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Connection.ConnectionMessageClient.ConnectionMessageTypeClient} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.Connection.StartMatchMaking;
      reader.readMessage(value,proto.Connection.StartMatchMaking.deserializeBinaryFromReader);
      msg.setStartmatchmaking(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Connection.ConnectionMessageClient} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Connection.ConnectionMessageClient.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Connection.ConnectionMessageClient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Connection.ConnectionMessageClient.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getStartmatchmaking();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Connection.StartMatchMaking.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Connection.ConnectionMessageClient} The clone.
 */
proto.Connection.ConnectionMessageClient.prototype.cloneMessage = function() {
  return /** @type {!proto.Connection.ConnectionMessageClient} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ConnectionMessageTypeClient type = 1;
 * @return {!proto.Connection.ConnectionMessageClient.ConnectionMessageTypeClient}
 */
proto.Connection.ConnectionMessageClient.prototype.getType = function() {
  return /** @type {!proto.Connection.ConnectionMessageClient.ConnectionMessageTypeClient} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.Connection.ConnectionMessageClient.ConnectionMessageTypeClient} value  */
proto.Connection.ConnectionMessageClient.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional StartMatchMaking startMatchMaking = 2;
 * @return {proto.Connection.StartMatchMaking}
 */
proto.Connection.ConnectionMessageClient.prototype.getStartmatchmaking = function() {
  return /** @type{proto.Connection.StartMatchMaking} */ (
    jspb.Message.getWrapperField(this, proto.Connection.StartMatchMaking, 2));
};


/** @param {proto.Connection.StartMatchMaking|undefined} value  */
proto.Connection.ConnectionMessageClient.prototype.setStartmatchmaking = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Connection.ConnectionMessageClient.prototype.clearStartmatchmaking = function() {
  this.setStartmatchmaking(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Connection.ConnectionMessageClient.prototype.hasStartmatchmaking = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.Connection.ConnectionMessageClient.ConnectionMessageTypeClient = {
  START_MATCH_MAKING: 0,
  STOP_MATCH_MAKING: 1,
  READY: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Connection.ConnectionMessageServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Connection.ConnectionMessageServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Connection.ConnectionMessageServer.displayName = 'proto.Connection.ConnectionMessageServer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Connection.ConnectionMessageServer.prototype.toObject = function(opt_includeInstance) {
  return proto.Connection.ConnectionMessageServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Connection.ConnectionMessageServer} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Connection.ConnectionMessageServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: msg.getType(),
    ackmm: (f = msg.getAckmm()) && proto.Connection.ACKMM.toObject(includeInstance, f),
    startgame: (f = msg.getStartgame()) && proto.Connection.StartGame.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Connection.ConnectionMessageServer}
 */
proto.Connection.ConnectionMessageServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Connection.ConnectionMessageServer;
  return proto.Connection.ConnectionMessageServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Connection.ConnectionMessageServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Connection.ConnectionMessageServer}
 */
proto.Connection.ConnectionMessageServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Connection.ConnectionMessageServer.ConnectionMessageTypeServer} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.Connection.ACKMM;
      reader.readMessage(value,proto.Connection.ACKMM.deserializeBinaryFromReader);
      msg.setAckmm(value);
      break;
    case 3:
      var value = new proto.Connection.StartGame;
      reader.readMessage(value,proto.Connection.StartGame.deserializeBinaryFromReader);
      msg.setStartgame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Connection.ConnectionMessageServer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Connection.ConnectionMessageServer.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Connection.ConnectionMessageServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Connection.ConnectionMessageServer.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getAckmm();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Connection.ACKMM.serializeBinaryToWriter
    );
  }
  f = this.getStartgame();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Connection.StartGame.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Connection.ConnectionMessageServer} The clone.
 */
proto.Connection.ConnectionMessageServer.prototype.cloneMessage = function() {
  return /** @type {!proto.Connection.ConnectionMessageServer} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ConnectionMessageTypeServer type = 1;
 * @return {!proto.Connection.ConnectionMessageServer.ConnectionMessageTypeServer}
 */
proto.Connection.ConnectionMessageServer.prototype.getType = function() {
  return /** @type {!proto.Connection.ConnectionMessageServer.ConnectionMessageTypeServer} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.Connection.ConnectionMessageServer.ConnectionMessageTypeServer} value  */
proto.Connection.ConnectionMessageServer.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ACKMM ackmm = 2;
 * @return {proto.Connection.ACKMM}
 */
proto.Connection.ConnectionMessageServer.prototype.getAckmm = function() {
  return /** @type{proto.Connection.ACKMM} */ (
    jspb.Message.getWrapperField(this, proto.Connection.ACKMM, 2));
};


/** @param {proto.Connection.ACKMM|undefined} value  */
proto.Connection.ConnectionMessageServer.prototype.setAckmm = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Connection.ConnectionMessageServer.prototype.clearAckmm = function() {
  this.setAckmm(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Connection.ConnectionMessageServer.prototype.hasAckmm = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StartGame startGame = 3;
 * @return {proto.Connection.StartGame}
 */
proto.Connection.ConnectionMessageServer.prototype.getStartgame = function() {
  return /** @type{proto.Connection.StartGame} */ (
    jspb.Message.getWrapperField(this, proto.Connection.StartGame, 3));
};


/** @param {proto.Connection.StartGame|undefined} value  */
proto.Connection.ConnectionMessageServer.prototype.setStartgame = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.Connection.ConnectionMessageServer.prototype.clearStartgame = function() {
  this.setStartgame(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Connection.ConnectionMessageServer.prototype.hasStartgame = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.Connection.ConnectionMessageServer.ConnectionMessageTypeServer = {
  ACK_MATCH_MAKING: 0,
  MATCH_FOUND: 1,
  START_GAME: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Connection.StartMatchMaking = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Connection.StartMatchMaking, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Connection.StartMatchMaking.displayName = 'proto.Connection.StartMatchMaking';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Connection.StartMatchMaking.prototype.toObject = function(opt_includeInstance) {
  return proto.Connection.StartMatchMaking.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Connection.StartMatchMaking} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Connection.StartMatchMaking.toObject = function(includeInstance, msg) {
  var f, obj = {
    elo: msg.getElo(),
    myname: msg.getMyname()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Connection.StartMatchMaking}
 */
proto.Connection.StartMatchMaking.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Connection.StartMatchMaking;
  return proto.Connection.StartMatchMaking.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Connection.StartMatchMaking} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Connection.StartMatchMaking}
 */
proto.Connection.StartMatchMaking.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setElo(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMyname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Connection.StartMatchMaking} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Connection.StartMatchMaking.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Connection.StartMatchMaking.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Connection.StartMatchMaking.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getElo();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getMyname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Connection.StartMatchMaking} The clone.
 */
proto.Connection.StartMatchMaking.prototype.cloneMessage = function() {
  return /** @type {!proto.Connection.StartMatchMaking} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 Elo = 3;
 * @return {number}
 */
proto.Connection.StartMatchMaking.prototype.getElo = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.Connection.StartMatchMaking.prototype.setElo = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string myName = 4;
 * @return {string}
 */
proto.Connection.StartMatchMaking.prototype.getMyname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.Connection.StartMatchMaking.prototype.setMyname = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Connection.ACKMM = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Connection.ACKMM, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Connection.ACKMM.displayName = 'proto.Connection.ACKMM';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Connection.ACKMM.prototype.toObject = function(opt_includeInstance) {
  return proto.Connection.ACKMM.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Connection.ACKMM} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Connection.ACKMM.toObject = function(includeInstance, msg) {
  var f, obj = {
    isok: msg.getIsok()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Connection.ACKMM}
 */
proto.Connection.ACKMM.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Connection.ACKMM;
  return proto.Connection.ACKMM.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Connection.ACKMM} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Connection.ACKMM}
 */
proto.Connection.ACKMM.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsok(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Connection.ACKMM} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Connection.ACKMM.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Connection.ACKMM.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Connection.ACKMM.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getIsok();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Connection.ACKMM} The clone.
 */
proto.Connection.ACKMM.prototype.cloneMessage = function() {
  return /** @type {!proto.Connection.ACKMM} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool isOk = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Connection.ACKMM.prototype.getIsok = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
proto.Connection.ACKMM.prototype.setIsok = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Connection.StartGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Connection.StartGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Connection.StartGame.displayName = 'proto.Connection.StartGame';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Connection.StartGame.prototype.toObject = function(opt_includeInstance) {
  return proto.Connection.StartGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Connection.StartGame} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Connection.StartGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    ismain: msg.getIsmain(),
    challengedname: msg.getChallengedname()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Connection.StartGame}
 */
proto.Connection.StartGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Connection.StartGame;
  return proto.Connection.StartGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Connection.StartGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Connection.StartGame}
 */
proto.Connection.StartGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsmain(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChallengedname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Connection.StartGame} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Connection.StartGame.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Connection.StartGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Connection.StartGame.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getIsmain();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getChallengedname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Connection.StartGame} The clone.
 */
proto.Connection.StartGame.prototype.cloneMessage = function() {
  return /** @type {!proto.Connection.StartGame} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool isMain = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Connection.StartGame.prototype.getIsmain = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
proto.Connection.StartGame.prototype.setIsmain = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string challengedName = 2;
 * @return {string}
 */
proto.Connection.StartGame.prototype.getChallengedname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.Connection.StartGame.prototype.setChallengedname = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, proto.Connection);
