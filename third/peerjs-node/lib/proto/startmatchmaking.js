/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.Connection.StartMatchMaking');

goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Connection.StartMatchMaking = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Connection.StartMatchMaking, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Connection.StartMatchMaking.displayName = 'proto.Connection.StartMatchMaking';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Connection.StartMatchMaking.prototype.toObject = function(opt_includeInstance) {
  return proto.Connection.StartMatchMaking.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Connection.StartMatchMaking} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Connection.StartMatchMaking.toObject = function(includeInstance, msg) {
  var f, obj = {
    versionmajor: jspb.Message.getField(msg, 1),
    versionminor: jspb.Message.getField(msg, 2),
    elo: !msg.hasElo() ? 0 : jspb.Message.getField(msg, 3),
    myname: jspb.Message.getField(msg, 4),
    challengedname: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Connection.StartMatchMaking} The clone.
 */
proto.Connection.StartMatchMaking.prototype.cloneMessage = function() {
  return /** @type {!proto.Connection.StartMatchMaking} */ (jspb.Message.cloneMessage(this));
};


/**
 * required int32 versionMajor = 1;
 * @return {number}
 */
proto.Connection.StartMatchMaking.prototype.getVersionmajor = function() {
  return /** @type {number} */ (!this.hasVersionmajor() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.Connection.StartMatchMaking.prototype.setVersionmajor = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Connection.StartMatchMaking.prototype.clearVersionmajor = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Connection.StartMatchMaking.prototype.hasVersionmajor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 versionMinor = 2;
 * @return {number}
 */
proto.Connection.StartMatchMaking.prototype.getVersionminor = function() {
  return /** @type {number} */ (!this.hasVersionminor() ? 0 : jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.Connection.StartMatchMaking.prototype.setVersionminor = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Connection.StartMatchMaking.prototype.clearVersionminor = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Connection.StartMatchMaking.prototype.hasVersionminor = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 Elo = 3;
 * @return {number}
 */
proto.Connection.StartMatchMaking.prototype.getElo = function() {
  return /** @type {number} */ (!this.hasElo() ? 0 : jspb.Message.getField(this, 3));
};


/** @param {number?|undefined} value  */
proto.Connection.StartMatchMaking.prototype.setElo = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Connection.StartMatchMaking.prototype.clearElo = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Connection.StartMatchMaking.prototype.hasElo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string myName = 4;
 * @return {string}
 */
proto.Connection.StartMatchMaking.prototype.getMyname = function() {
  return /** @type {string} */ (!this.hasMyname() ? "" : jspb.Message.getField(this, 4));
};


/** @param {string|undefined} value  */
proto.Connection.StartMatchMaking.prototype.setMyname = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Connection.StartMatchMaking.prototype.clearMyname = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Connection.StartMatchMaking.prototype.hasMyname = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string challengedName = 5;
 * @return {string}
 */
proto.Connection.StartMatchMaking.prototype.getChallengedname = function() {
  return /** @type {string} */ (!this.hasChallengedname() ? "" : jspb.Message.getField(this, 5));
};


/** @param {string?|undefined} value  */
proto.Connection.StartMatchMaking.prototype.setChallengedname = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.Connection.StartMatchMaking.prototype.clearChallengedname = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Connection.StartMatchMaking.prototype.hasChallengedname = function() {
  return jspb.Message.getField(this, 5) != null;
};


