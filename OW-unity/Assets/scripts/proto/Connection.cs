// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Connection.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Connection {

  /// <summary>Holder for reflection information generated from Connection.proto</summary>
  public static partial class ConnectionReflection {

    #region Descriptor
    /// <summary>File descriptor for Connection.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConnectionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBDb25uZWN0aW9uLnByb3RvEgpDb25uZWN0aW9uIvkBChdDb25uZWN0aW9u",
            "TWVzc2FnZUNsaWVudBJNCgR0eXBlGAEgASgOMj8uQ29ubmVjdGlvbi5Db25u",
            "ZWN0aW9uTWVzc2FnZUNsaWVudC5Db25uZWN0aW9uTWVzc2FnZVR5cGVDbGll",
            "bnQSNgoQc3RhcnRNYXRjaE1ha2luZxgCIAEoCzIcLkNvbm5lY3Rpb24uU3Rh",
            "cnRNYXRjaE1ha2luZyJXChtDb25uZWN0aW9uTWVzc2FnZVR5cGVDbGllbnQS",
            "FgoSU1RBUlRfTUFUQ0hfTUFLSU5HEAASFQoRU1RPUF9NQVRDSF9NQUtJTkcQ",
            "ARIJCgVSRUFEWRACIooCChdDb25uZWN0aW9uTWVzc2FnZVNlcnZlchJNCgR0",
            "eXBlGAEgASgOMj8uQ29ubmVjdGlvbi5Db25uZWN0aW9uTWVzc2FnZVNlcnZl",
            "ci5Db25uZWN0aW9uTWVzc2FnZVR5cGVTZXJ2ZXISIAoFYWNrbW0YAiABKAsy",
            "ES5Db25uZWN0aW9uLkFDS01NEigKCXN0YXJ0R2FtZRgDIAEoCzIVLkNvbm5l",
            "Y3Rpb24uU3RhcnRHYW1lIlQKG0Nvbm5lY3Rpb25NZXNzYWdlVHlwZVNlcnZl",
            "chIUChBBQ0tfTUFUQ0hfTUFLSU5HEAASDwoLTUFUQ0hfRk9VTkQQARIOCgpT",
            "VEFSVF9HQU1FEAIicwoQU3RhcnRNYXRjaE1ha2luZxIUCgx2ZXJzaW9uTWFq",
            "b3IYASABKAUSFAoMdmVyc2lvbk1pbm9yGAIgASgFEgsKA0VsbxgDIAEoBRIO",
            "CgZteU5hbWUYBCABKAkSFgoOY2hhbGxlbmdlZE5hbWUYBSABKAkiFQoFQUNL",
            "TU0SDAoEaXNPaxgBIAEoCCIzCglTdGFydEdhbWUSDgoGaXNNYWluGAEgASgI",
            "EhYKDmNoYWxsZW5nZWROYW1lGAIgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Connection.ConnectionMessageClient), global::Connection.ConnectionMessageClient.Parser, new[]{ "Type", "StartMatchMaking" }, null, new[]{ typeof(global::Connection.ConnectionMessageClient.Types.ConnectionMessageTypeClient) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connection.ConnectionMessageServer), global::Connection.ConnectionMessageServer.Parser, new[]{ "Type", "Ackmm", "StartGame" }, null, new[]{ typeof(global::Connection.ConnectionMessageServer.Types.ConnectionMessageTypeServer) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connection.StartMatchMaking), global::Connection.StartMatchMaking.Parser, new[]{ "VersionMajor", "VersionMinor", "Elo", "MyName", "ChallengedName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connection.ACKMM), global::Connection.ACKMM.Parser, new[]{ "IsOk" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connection.StartGame), global::Connection.StartGame.Parser, new[]{ "IsMain", "ChallengedName" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ConnectionMessageClient : pb::IMessage<ConnectionMessageClient> {
    private static readonly pb::MessageParser<ConnectionMessageClient> _parser = new pb::MessageParser<ConnectionMessageClient>(() => new ConnectionMessageClient());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionMessageClient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connection.ConnectionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionMessageClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionMessageClient(ConnectionMessageClient other) : this() {
      type_ = other.type_;
      StartMatchMaking = other.startMatchMaking_ != null ? other.StartMatchMaking.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionMessageClient Clone() {
      return new ConnectionMessageClient(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Connection.ConnectionMessageClient.Types.ConnectionMessageTypeClient type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connection.ConnectionMessageClient.Types.ConnectionMessageTypeClient Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "startMatchMaking" field.</summary>
    public const int StartMatchMakingFieldNumber = 2;
    private global::Connection.StartMatchMaking startMatchMaking_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connection.StartMatchMaking StartMatchMaking {
      get { return startMatchMaking_; }
      set {
        startMatchMaking_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionMessageClient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionMessageClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(StartMatchMaking, other.StartMatchMaking)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (startMatchMaking_ != null) hash ^= StartMatchMaking.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (startMatchMaking_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StartMatchMaking);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (startMatchMaking_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartMatchMaking);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionMessageClient other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.startMatchMaking_ != null) {
        if (startMatchMaking_ == null) {
          startMatchMaking_ = new global::Connection.StartMatchMaking();
        }
        StartMatchMaking.MergeFrom(other.StartMatchMaking);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Connection.ConnectionMessageClient.Types.ConnectionMessageTypeClient) input.ReadEnum();
            break;
          }
          case 18: {
            if (startMatchMaking_ == null) {
              startMatchMaking_ = new global::Connection.StartMatchMaking();
            }
            input.ReadMessage(startMatchMaking_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ConnectionMessageClient message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ConnectionMessageTypeClient {
        [pbr::OriginalName("START_MATCH_MAKING")] StartMatchMaking = 0,
        [pbr::OriginalName("STOP_MATCH_MAKING")] StopMatchMaking = 1,
        [pbr::OriginalName("READY")] Ready = 2,
      }

    }
    #endregion

  }

  public sealed partial class ConnectionMessageServer : pb::IMessage<ConnectionMessageServer> {
    private static readonly pb::MessageParser<ConnectionMessageServer> _parser = new pb::MessageParser<ConnectionMessageServer>(() => new ConnectionMessageServer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionMessageServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connection.ConnectionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionMessageServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionMessageServer(ConnectionMessageServer other) : this() {
      type_ = other.type_;
      Ackmm = other.ackmm_ != null ? other.Ackmm.Clone() : null;
      StartGame = other.startGame_ != null ? other.StartGame.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionMessageServer Clone() {
      return new ConnectionMessageServer(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Connection.ConnectionMessageServer.Types.ConnectionMessageTypeServer type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connection.ConnectionMessageServer.Types.ConnectionMessageTypeServer Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "ackmm" field.</summary>
    public const int AckmmFieldNumber = 2;
    private global::Connection.ACKMM ackmm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connection.ACKMM Ackmm {
      get { return ackmm_; }
      set {
        ackmm_ = value;
      }
    }

    /// <summary>Field number for the "startGame" field.</summary>
    public const int StartGameFieldNumber = 3;
    private global::Connection.StartGame startGame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connection.StartGame StartGame {
      get { return startGame_; }
      set {
        startGame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionMessageServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionMessageServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Ackmm, other.Ackmm)) return false;
      if (!object.Equals(StartGame, other.StartGame)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ackmm_ != null) hash ^= Ackmm.GetHashCode();
      if (startGame_ != null) hash ^= StartGame.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (ackmm_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ackmm);
      }
      if (startGame_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StartGame);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (ackmm_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ackmm);
      }
      if (startGame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartGame);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionMessageServer other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ackmm_ != null) {
        if (ackmm_ == null) {
          ackmm_ = new global::Connection.ACKMM();
        }
        Ackmm.MergeFrom(other.Ackmm);
      }
      if (other.startGame_ != null) {
        if (startGame_ == null) {
          startGame_ = new global::Connection.StartGame();
        }
        StartGame.MergeFrom(other.StartGame);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Connection.ConnectionMessageServer.Types.ConnectionMessageTypeServer) input.ReadEnum();
            break;
          }
          case 18: {
            if (ackmm_ == null) {
              ackmm_ = new global::Connection.ACKMM();
            }
            input.ReadMessage(ackmm_);
            break;
          }
          case 26: {
            if (startGame_ == null) {
              startGame_ = new global::Connection.StartGame();
            }
            input.ReadMessage(startGame_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ConnectionMessageServer message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ConnectionMessageTypeServer {
        [pbr::OriginalName("ACK_MATCH_MAKING")] AckMatchMaking = 0,
        [pbr::OriginalName("MATCH_FOUND")] MatchFound = 1,
        [pbr::OriginalName("START_GAME")] StartGame = 2,
      }

    }
    #endregion

  }

  public sealed partial class StartMatchMaking : pb::IMessage<StartMatchMaking> {
    private static readonly pb::MessageParser<StartMatchMaking> _parser = new pb::MessageParser<StartMatchMaking>(() => new StartMatchMaking());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartMatchMaking> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connection.ConnectionReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartMatchMaking() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartMatchMaking(StartMatchMaking other) : this() {
      versionMajor_ = other.versionMajor_;
      versionMinor_ = other.versionMinor_;
      elo_ = other.elo_;
      myName_ = other.myName_;
      challengedName_ = other.challengedName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartMatchMaking Clone() {
      return new StartMatchMaking(this);
    }

    /// <summary>Field number for the "versionMajor" field.</summary>
    public const int VersionMajorFieldNumber = 1;
    private int versionMajor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VersionMajor {
      get { return versionMajor_; }
      set {
        versionMajor_ = value;
      }
    }

    /// <summary>Field number for the "versionMinor" field.</summary>
    public const int VersionMinorFieldNumber = 2;
    private int versionMinor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VersionMinor {
      get { return versionMinor_; }
      set {
        versionMinor_ = value;
      }
    }

    /// <summary>Field number for the "Elo" field.</summary>
    public const int EloFieldNumber = 3;
    private int elo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Elo {
      get { return elo_; }
      set {
        elo_ = value;
      }
    }

    /// <summary>Field number for the "myName" field.</summary>
    public const int MyNameFieldNumber = 4;
    private string myName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MyName {
      get { return myName_; }
      set {
        myName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "challengedName" field.</summary>
    public const int ChallengedNameFieldNumber = 5;
    private string challengedName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChallengedName {
      get { return challengedName_; }
      set {
        challengedName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartMatchMaking);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartMatchMaking other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VersionMajor != other.VersionMajor) return false;
      if (VersionMinor != other.VersionMinor) return false;
      if (Elo != other.Elo) return false;
      if (MyName != other.MyName) return false;
      if (ChallengedName != other.ChallengedName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VersionMajor != 0) hash ^= VersionMajor.GetHashCode();
      if (VersionMinor != 0) hash ^= VersionMinor.GetHashCode();
      if (Elo != 0) hash ^= Elo.GetHashCode();
      if (MyName.Length != 0) hash ^= MyName.GetHashCode();
      if (ChallengedName.Length != 0) hash ^= ChallengedName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VersionMajor != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(VersionMajor);
      }
      if (VersionMinor != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VersionMinor);
      }
      if (Elo != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Elo);
      }
      if (MyName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MyName);
      }
      if (ChallengedName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ChallengedName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VersionMajor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VersionMajor);
      }
      if (VersionMinor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VersionMinor);
      }
      if (Elo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Elo);
      }
      if (MyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MyName);
      }
      if (ChallengedName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChallengedName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartMatchMaking other) {
      if (other == null) {
        return;
      }
      if (other.VersionMajor != 0) {
        VersionMajor = other.VersionMajor;
      }
      if (other.VersionMinor != 0) {
        VersionMinor = other.VersionMinor;
      }
      if (other.Elo != 0) {
        Elo = other.Elo;
      }
      if (other.MyName.Length != 0) {
        MyName = other.MyName;
      }
      if (other.ChallengedName.Length != 0) {
        ChallengedName = other.ChallengedName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VersionMajor = input.ReadInt32();
            break;
          }
          case 16: {
            VersionMinor = input.ReadInt32();
            break;
          }
          case 24: {
            Elo = input.ReadInt32();
            break;
          }
          case 34: {
            MyName = input.ReadString();
            break;
          }
          case 42: {
            ChallengedName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ACKMM : pb::IMessage<ACKMM> {
    private static readonly pb::MessageParser<ACKMM> _parser = new pb::MessageParser<ACKMM>(() => new ACKMM());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ACKMM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connection.ConnectionReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ACKMM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ACKMM(ACKMM other) : this() {
      isOk_ = other.isOk_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ACKMM Clone() {
      return new ACKMM(this);
    }

    /// <summary>Field number for the "isOk" field.</summary>
    public const int IsOkFieldNumber = 1;
    private bool isOk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOk {
      get { return isOk_; }
      set {
        isOk_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ACKMM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ACKMM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsOk != other.IsOk) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsOk != false) hash ^= IsOk.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsOk != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOk);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsOk != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ACKMM other) {
      if (other == null) {
        return;
      }
      if (other.IsOk != false) {
        IsOk = other.IsOk;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsOk = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartGame : pb::IMessage<StartGame> {
    private static readonly pb::MessageParser<StartGame> _parser = new pb::MessageParser<StartGame>(() => new StartGame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connection.ConnectionReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGame(StartGame other) : this() {
      isMain_ = other.isMain_;
      challengedName_ = other.challengedName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGame Clone() {
      return new StartGame(this);
    }

    /// <summary>Field number for the "isMain" field.</summary>
    public const int IsMainFieldNumber = 1;
    private bool isMain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMain {
      get { return isMain_; }
      set {
        isMain_ = value;
      }
    }

    /// <summary>Field number for the "challengedName" field.</summary>
    public const int ChallengedNameFieldNumber = 2;
    private string challengedName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChallengedName {
      get { return challengedName_; }
      set {
        challengedName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsMain != other.IsMain) return false;
      if (ChallengedName != other.ChallengedName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsMain != false) hash ^= IsMain.GetHashCode();
      if (ChallengedName.Length != 0) hash ^= ChallengedName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsMain != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsMain);
      }
      if (ChallengedName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ChallengedName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsMain != false) {
        size += 1 + 1;
      }
      if (ChallengedName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChallengedName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartGame other) {
      if (other == null) {
        return;
      }
      if (other.IsMain != false) {
        IsMain = other.IsMain;
      }
      if (other.ChallengedName.Length != 0) {
        ChallengedName = other.ChallengedName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsMain = input.ReadBool();
            break;
          }
          case 18: {
            ChallengedName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
